allprojects {
    group 'com.wxmlabs'
    version '1.1'

    ext {
        // "-Dwxmlabs.releases" to archive release version
        isReleaseVersion = System.properties["wxmlabs.releases"] != null
    }
    version = isReleaseVersion ? version : "$version-SNAPSHOT"
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'signing'

    sourceCompatibility = 1.6

    repositories {
        mavenCentral()
    }

    ext {
        spockVersion = '1.1-groovy-2.4'
    }

    dependencies {
        compile("org.slf4j:slf4j-api:1.7.5")
        compile("com.google.code.gson:gson:2.8.5")

        // for development environment logging
        runtimeOnly("ch.qos.logback:logback-classic:1.2.3")

        // spock framework for unit test
        testCompile("org.spockframework:spock-core:${spockVersion}") {
            exclude module: 'groovy-all'
        }
        testCompile("org.codehaus.groovy:groovy:2.4.12")
    }

    // 解决文件编码问题
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    // 解决文件编码问题
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    if (javaHome) {
        def javaExecutablesPath = new File(javaHome, 'bin')
        def javaExecutables = [:].withDefault { execName ->
            if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
                execName = "${execName}.exe"
            }
            def executable = new File(javaExecutablesPath, execName.toString())
            assert executable.exists(): "There is no ${execName} executable in ${javaExecutablesPath}"
            executable
        }
        tasks.withType(JavaCompile) {
            options.fork = true
            options.forkOptions.javaHome = file(javaHome)
        }
        tasks.withType(Javadoc) {
            executable = javaExecutables.javadoc
        }
        tasks.withType(Test) {
            executable = javaExecutables.java
        }
        tasks.withType(JavaExec) {
            executable = javaExecutables.java
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
        }
    }

    check.dependsOn jacocoTestReport

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUserName, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUserName, password: ossrhPassword)
                }

                pom.project {
                    name 'Aurora Cryptography'
                    packaging 'jar'
                    description 'Aurora Cryptography - a simple digital signature signer'
                    url 'https://github.com/wxmlabs/aurora'

                    scm {
                        connection 'scm:git:https://github.com/wxmlabs/aurora.git'
                        developerConnection 'scm:git:ssh:git@github.com:wxmlabs/aurora.git'
                        url 'https://github.com/wxmlabs/aurora/'
                    }

                    licenses {
                        license {
                            name 'GNU Lesser General Public License v3.0'
                            url 'http://www.gnu.org/licenses/lgpl-3.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'wxmlabs'
                            name 'WXM Labs'
                            email 'wxmlabs@vselect.com'
                        }
                    }
                }
            }
        }
    }
}
